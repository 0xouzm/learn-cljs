; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"0.8.3"},cider/cider-nrepl {:mvn/version,"0.26.0"},cider/piggieback {:mvn/version,"0.5.2"}}}' -A:fig -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware cider.piggieback/wrap-cljs-repl]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Creating cljs repl session...
; Connecting cljs repl: deps.edn + Figwheel Main...
;   The Calva Connection Log might have more connection progress information.
; Starting cljs repl for: deps.edn + Figwheel Main...
; CLJS REPL ready to connect. Please, start your ClojureScript app.
;   Open the app on this URL: http://localhost:9500
;   The CLJS REPL will connect when your app is running.
; Cljs builds started
; Connected session: cljs, repl: dev
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
clj꞉cljs.user꞉> 
#'learn-cljs.starbase/prompt

cljs꞉learn-cljs.starbase꞉>  ; Use `alt+enter` to evaluate
#'learn-cljs.starbase/on-answer

cljs꞉learn-cljs.starbase꞉> 
#'learn-cljs.starbase/on-answer

cljs꞉learn-cljs.starbase꞉> 
{:node #object[HTMLDivElement [object HTMLDivElement]], :display {:font "monospace", :white-space "pre", :font-size 14, :prompt "=> ", :colors {:background "#333", :output "#eee", :prompt "#ddd", :input "#fff"}}, :buffer #object[cljs.core.Atom {:val ["Starbase Lambda" "Welcome, bold adventurer! You are about to embark on a dangerous quest to find the Tetryon Singularity." "Are you up to the task?" ""]}], :history #object[cljs.core.Atom {:val []}], :dims {:cols 226, :rows 51, :char-width 8.4013671875, :line-height 15}, :elem-cache {:output #object[HTMLDivElement [object HTMLDivElement]], :prompt #object[HTMLSpanElement [object HTMLSpanElement]], :input #object[HTMLInputElement [object HTMLInputElement]]}, :on-read #object[cljs.core.Atom {:val #object[Function]}]}
cljs꞉learn-cljs.starbase꞉> (let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])]
                             (for [sides sides-list]
                               (Math.sqrt (+ (Math.pow (first sides) 2)
                                             (Math.pow (second sides) 2)))))
(7.323933369440222 5.656854249492381 5 6.264982043070834)
cljs꞉learn-cljs.starbase꞉> 
(7.323933369440222 5.656854249492381 5 6.264982043070834)
cljs꞉learn-cljs.starbase꞉> 
nil
; WARNING: Use of undeclared Var learn-cljs.starbase/sides-list at line 1 <cljs repl>
cljs꞉learn-cljs.starbase꞉> 
4
cljs꞉learn-cljs.starbase꞉> 
[nil ([4.2 6] [4 4] [3 4] [5.5 3])](let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])]
                                     (for [sides sides-list]
                                       (Math.sqrt (+ (Math.pow (first sides) 2)
                                                     (Math.pow (second sides) 2)))))
; WARNING: Use of undeclared Var learn-cljs.starbase/sides-list at line 1 <cljs repl>
cljs꞉learn-cljs.starbase꞉> 
(7.323933369440222 5.656854249492381 5 6.264982043070834)
cljs꞉learn-cljs.starbase꞉> 
(let [sides-list '( [4.2 6] [4 4] [3 4] [5.5 3])]
  (for [sides sides-list]
    (Math.sqrt (+ (Math.pow (first sides) 2)
                  (Math.pow (second sides) 2)))))
(7.323933369440222 5.656854249492381 5 6.264982043070834)
cljs꞉learn-cljs.starbase꞉> (let (arrays '([0 0] [3 5] [0 0] [1 0]))
                             (for [s arrays]
                               (Math.sqrt (+ (Math.pow (first s) 2)
                                             (Math.pow (second s)2 )))))

#object[abs]
cljs꞉learn-cljs.starbase꞉> 
1
cljs꞉learn-cljs.starbase꞉> (let (arrays '([0 0] [3 5] [0 0] [1 0]))
                             (for [s arrays]
                               (Math.sqrt (+ (Math.pow (first s) 2)
                                             (Math.pow (second s) 2)))))
Compile Exception: let requires a vector for its binding  
; class clojure.lang.ExceptionInfo
cljs꞉learn-cljs.starbase꞉> 
(let (arrays '([[0 0] [3 5]] [[0 0] [1 0]]))
  (for [s arrays]
    (Math.sqrt (+ (Math.pow (first s) 2)
                  (Math.pow (second s) 2)))))
Compile Exception: let requires a vector for its binding  
; class clojure.lang.ExceptionInfo
cljs꞉learn-cljs.starbase꞉> 
(let [arrays '([[0 0] [3 5]] [[0 0] [1 0]])]
  (for [s arrays]
    (Math.sqrt (+ (Math.pow (first s) 2)
                  (Math.pow (second s) 2)))))
Compile Exception: let requires a vector for its binding  
; class clojure.lang.ExceptionInfo
cljs꞉learn-cljs.starbase꞉> (let [arrays '([[0 0] [3 5]] [[0 0] [1 0]])]
                             (for [s arrays]
                               (Math.sqrt (+ (Math.pow (first s) 2)
                                             (Math.pow (second s) 2)))))
(##NaN ##NaN)
cljs꞉learn-cljs.starbase꞉> 
(let [arrays '([[0 0] [3 5]] [[0 0] [1 0]])]
  (for [s arrays]
    (Math.sqrt (+ (Math.pow (first (Math.abs (first s) (second s))) 2)
                  (Math.pow (second (Math.abs s)) 2)))))
; #object[Error Error: NaN is not ISeqable]
cljs꞉learn-cljs.starbase꞉> 
0
; WARNING: Use of undeclared Var learn-cljs.starbase/s at line 1 <cljs repl>
; WARNING: Use of undeclared Var learn-cljs.starbase/s at line 1 <cljs repl>
cljs꞉learn-cljs.starbase꞉> (let [arrays '([[0 0] [3 5]] [[0 0] [1 0]])]
                             (for [s arrays]
                               (Math.sqrt (+ (Math.pow (first (Math.abs (- (first s) (second s)))) 2)
                                             (Math.pow (second (Math.abs (- (first s) (second s)))) 2)))))
; #object[Error Error: NaN is not ISeqable]
cljs꞉learn-cljs.starbase꞉> (Math.abs (- 2 4))
2
cljs꞉learn-cljs.starbase꞉> 
 (let [arrays '([[0 0] [3 5]] [[0 0] [1 0]])]
                             (for [s arrays]
                               (Math.sqrt (+ (Math.pow (first (Math.abs (- (first s) (second s)))) 2)
                                             (Math.pow (second (Math.abs (- (first s) (second s)))) 2)))))
; #object[Error Error: NaN is not ISeqable]
cljs꞉learn-cljs.starbase꞉> 
